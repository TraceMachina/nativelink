---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: rebuild-nativelink
spec:
  description: >
    Rebuild the nativelink repository using a specified Nix command.
  params:
    - name: flakeOutput
      type: string
      description: |
        The output of a Nix Flake. This output must refer to an image built with
        nix2container.

        See:
          - https://nixos.wiki/wiki/Flakes for more in formation on the Flake
            URL schema.
          - https://github.com/nlewo/nix2container for more information on the
            required builder for the flake outputs.

        Examples:
          - "/mnt/src_root#someoutput" for a flake output in the `output-src`
            directory.
          - "github:TraceMachina/nativelink#image" for the latest nativelink
            image.
          - "github:<user>/<repo>?ref=pull/<PR_NUMBER>/head#<PACKAGE>" to use
            an image from a pull request of a repository on GitHub.
    - name: configMapName
      type: string
      description: |
        The name of the ConfigMap that we write the image tag to.

        Other parts of the cluster may refer to this configmap to get the
        pre-evaluated tag of the image.
    - name: configMapNamespace
      type: string
      description: |
        The namespace of the ConfigMap that we write the image tag to.
    - name: registry
      type: string
      description: |
        The target registry.

        By default, attempts to push to "kind-registry:5000".
      default: "kind-registry:5000"
    - name: destTLSverify
      type: string
      description: |
        Whether to add `--dest-tls-verify=false` to the copy command.

        This should only be set when working with local registries.
      default: "true"
    - name: enableNixSandbox
      type: string
      description: |
        Boolean to configure the nix sandbox.

        In the default configuration this Task doesn't use the nix sandbox.
      default: "false"
  workspaces:
    - name: optional-src
      optional: true
      description: |
        The source repository to invoke from.
    - name: nix-store
      description: |
        An workspace containing a nix store. Appended via a `--store` argument.
    - name: images-url
      description: >
        Currently unused workspace to make the skopeo Task happy.
  tasks:
    - name: get-image-info
      taskRef:
        name: nix2container-image-info
      workspaces:
        - name: optional-src
          workspace: optional-src
        - name: nix-store
          workspace: nix-store
      params:
        - name: flakeOutput
          value: "$(params.flakeOutput)"

    - name: get-dest-image-url
      taskSpec:
        params:
          - name: registry
            type: string
          - name: imageName
            type: string
          - name: imageTag
            type: string
        results:
          - name: destImageURL
        steps:
          - name: get-url
            image: busybox
            script: |
              echo -n "$(params.registry)/$(params.imageName):$(params.imageTag)" \
                | tee "$(results.destImageURL.path)"
      params:
        - name: registry
          value: "$(params.registry)"
        - name: imageName
          value: "$(tasks.get-image-info.results.imageName)"
        - name: imageTag
          value: "$(tasks.get-image-info.results.imageTag)"

    - name: check-hashlocked-url
      taskRef:
        name: skopeo-check-hashlocked-url
      params:
        - name: imageName
          value: "$(tasks.get-image-info.results.imageName)"
        - name: imageTag
          value: "$(tasks.get-image-info.results.imageTag)"
        - name: registry
          value: "ghcr.io/tracemachina"

    - name: check-verified-prebuilt-availability
      taskRef:
        name: cosign-verify
      params:
        - name: fullImageURL
          value: "$(tasks.check-hashlocked-url.results.fullImageURL)"
        - name: certificateIdentity
          value: "https://github.com/TraceMachina/nativelink/.github/workflows/image.yaml@refs/heads/main"
        - name: certificateOIDCIssuer
          value: "https://token.actions.githubusercontent.com"
      when:
        - input: "$(tasks.check-hashlocked-url.results.exists)"
          operator: in
          values: ["true"]

    - name: copy-verified-prebuilt-image
      taskRef:
        name: skopeo-copy
      workspaces:
        - name: images-url
          workspace: images-url
      params:
        - name: srcImageURL
          value: "docker://$(tasks.check-hashlocked-url.results.fullImageURL)"
        - name: destImageURL
          value: "docker://$(tasks.get-dest-image-url.results.destImageURL)"
        - name: destTLSverify
          value: "$(params.destTLSverify)"
      when:
        - input: "$(tasks.check-hashlocked-url.results.exists)"
          operator: in
          values: ["true"]
      runAfter:
        - check-verified-prebuilt-availability

    - name: copy-nix-built-image
      taskRef:
        name: nix2container-copyto
      workspaces:
        - name: optional-src
          workspace: optional-src
        - name: nix-store
          workspace: nix-store
      params:
        - name: flakeOutput
          value: "$(params.flakeOutput)"
        - name: destImageURL
          value: "$(tasks.get-dest-image-url.results.destImageURL)"
        - name: destTLSverify
          value: "$(params.destTLSverify)"
        - name: enableNixSandbox
          value: "$(params.enableNixSandbox)"
      when:
        - input: "$(tasks.check-hashlocked-url.results.exists)"
          operator: notin
          values: ["true"]

    - name: update-image-tags
      taskRef:
        name: update-image-tags
      params:
        - name: imageName
          value: "$(tasks.get-image-info.results.imageName)"
        - name: imageTag
          value: "$(tasks.get-image-info.results.imageTag)"
        - name: configMapName
          value: "$(params.configMapName)"
        - name: configMapNamespace
          value: "$(params.configMapNamespace)"
      runAfter:
        - copy-verified-prebuilt-image
        - copy-nix-built-image
