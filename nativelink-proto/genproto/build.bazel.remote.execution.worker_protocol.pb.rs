// Copyright 2024 The NativeLink Authors. All rights reserved.
//
// Licensed under the Functional Source License, Version 1.1, Apache 2.0 Future License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    See LICENSE file for details
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is @generated by prost-build.
/// Work request sent to persistent worker
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkRequest {
    /// Command-line arguments for the worker
    #[prost(string, repeated, tag = "1")]
    pub arguments: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Input files for this request
    #[prost(message, repeated, tag = "2")]
    pub inputs: ::prost::alloc::vec::Vec<Input>,
    /// Unique request ID for this work item
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    /// Whether to cancel this request
    #[prost(bool, tag = "4")]
    pub cancel: bool,
    /// Verbosity level for logging
    #[prost(int32, tag = "5")]
    pub verbosity: i32,
    /// Sandbox directory for this request
    #[prost(string, tag = "6")]
    pub sandbox_dir: ::prost::alloc::string::String,
}
/// Input file for work request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Input {
    /// Path to the input file
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// Digest of the file content
    #[prost(bytes = "bytes", tag = "2")]
    pub digest: ::prost::bytes::Bytes,
}
/// Work response from persistent worker
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkResponse {
    /// Exit code of the work (0 = success)
    #[prost(int32, tag = "1")]
    pub exit_code: i32,
    /// Output from the worker
    #[prost(string, tag = "2")]
    pub output: ::prost::alloc::string::String,
    /// Request ID this response corresponds to
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    /// Whether the request was cancelled
    #[prost(bool, tag = "4")]
    pub was_cancelled: bool,
}
