[changelog]
# changelog header
header = """
<!-- vale off -->
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% macro commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}{% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | split(pat="\n") | first }} - ([{{ commit.id | truncate(length=7, end="") }}](<REPO>/commit/{{ commit.id }}))\
{% endmacro %}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
<!-- vale on -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/TraceMachina/nativelink" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
  # Custom rules for specific commits.
  { message = "Create directory for action", group = "<!-- 1 -->⛰️  Features" },
  { message = "Build nativelink with musl", group = "<!-- 1 -->⛰️  Features" },
  { message = "Shard store weight scale distribution", group = "<!-- 1 -->⛰️  Features" },
  { message = "Use mimalloc", group = "<!-- 1 -->⛰️  Features" },
  { message = "Build nativelink with musl", group = "<!-- 1 -->⛰️  Features" },
  { message = "Implement .* feature", group = "<!-- 1 -->⛰️  Features" },
  { message = "Add configuration breakdown page", group = "<!-- 3 -->📚 Documentation" },
  { message = "Draw a General Purpose Diagram", group = "<!-- 3 -->📚 Documentation" },
  { message = "Basic config updated", group = "<!-- 3 -->📚 Documentation" },
  { message = "Account for block size in filesystem store for eviction purposes", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Add OSFamily property in basic_cas.json", group = "<!-- 3 -->📚 Documentation" },
  { message = "Fix incorrect bazel version 6.4.0", group = "<!-- 3 -->📚 Documentation" },
  { message = "Completeness checking store should not check if directory digests exist", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Don't retry permanent failures", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Retry GrpcStore get_part_ref", group = "<!-- 1 -->⛰️  Features" },
  { message = "Evict on touch failure", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Implement `ClientStateManager` for `SimpleScheduler`", group = "<!-- 6 -->⚙️ Miscellaneous" },
  { message = "Move `update_action_with_internal_error` into `StateManager`", group = "<!-- 6 -->⚙️ Miscellaneous" },
  { message = "Migrate to callPackage syntax", group = "<!-- 6 -->⚙️ Miscellaneous" },
  { message = "Remove nativelink-proto as build dependency", group = "<!-- 4 -->🧪 Testing & CI" },
  { message = "Add rt-tokio feature to aws-sdk-s3", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "GrpcStore now sends digest function from context", group = "<!-- 2 -->🐛 Bug Fixes" },

  # Get all breaking changes first.
  { message = "Breaking", group = "<!-- 0 -->❌️  Breaking Changes" },
  { message = "BREAKING", group = "<!-- 0 -->❌️  Breaking Changes" },

  # Filter these out early but show them later in the changelog.
  { message = "docs", group = "<!-- 3 -->📚 Documentation" },
  { message = "document", group = "<!-- 3 -->📚 Documentation" },
  { message = "Document", group = "<!-- 3 -->📚 Documentation" },
  { message = "documentation", group = "<!-- 3 -->📚 Documentation" },
  { message = "README", group = "<!-- 3 -->📚 Documentation" },
  { message = "Example", group = "<!-- 3 -->📚 Documentation" },
  { message = "Breakdown", group = "<!-- 3 -->📚 Documentation" },
  { message = "Update .* Readme", group = "<!-- 3 -->📚 Documentation" },

  # Filter out all updates, but show them last.
  { message = "to [0-9.]+", group = "<!-- 7 -->⬆️ Bumps & Version Updates" },
  { message = "Bumb+", group = "<!-- 7 -->⬆️ Bumps & Version Updates" },
  { message = "Bump", group = "<!-- 7 -->⬆️ Bumps & Version Updates" },
  { message = "Update", group = "<!-- 7 -->⬆️ Bumps & Version Updates" },

  # Filter these out early but show them later in the changelog.
  { message = "test", group = "<!-- 4 -->🧪 Testing & CI" },
  { message = "CI", group = "<!-- 4 -->🧪 Testing & CI" },
  { message = "pre-commit", group = "<!-- 4 -->🧪 Testing & CI" },

  { message = "Add", group = "<!-- 1 -->⛰️  Features" },
  { message = "Allow", group = "<!-- 1 -->⛰️  Features" },
  { message = "Integrate", group = "<!-- 1 -->⛰️  Features" },
  { message = "Introduce", group = "<!-- 1 -->⛰️  Features" },
  { message = "Optimize", group = "<!-- 1 -->⛰️  Features" },

  { message = "Avoid", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Fix", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Handle", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Resolve", group = "<!-- 2 -->🐛 Bug Fixes" },

  # Catch-all in miscellaneous
  { message = ".*", group = "<!-- 6 -->⚙️ Miscellaneous" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = "rc"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
