# Copyright 2022 The NativeLink Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use blake3 as digest function instead of the much slower default sha256.
startup --digest_function=blake3
common --enable_platform_specific_config

# Don't use legacy toolchain resolution.
common --incompatible_enable_cc_toolchain_resolution
common --incompatible_enable_proto_toolchain_resolution

# Use '+' instead of the legacy '~' when resolving repo names.
common --incompatible_use_plus_in_repo_names

# Simulate rules_python's initialization with a script and use a statically
# linked musl Python toolchain.
# TODO(aaronmondal): This is a hack. It works for us because have just a few
#                    simple python scripts in the repository and don't have
#                    complex Python dependencies. Implement LRE for Python.
common --@rules_python//python/config_settings:bootstrap_impl=script
common --@rules_python//python/config_settings:py_linux_libc=musl

# Don't leak PATH and LD_LIBRARY_PATH into the build.
build --incompatible_strict_action_env

# Don't use legacy repository rules.
build --incompatible_disable_native_repo_rules

# Use the earliest supported C++ version for protoc.
build --cxxopt=-std=c++14 --host_cxxopt=-std=c++14

build --test_output=errors

build:debug -c dbg

build:self_test --remote_cache=grpc://127.0.0.1:50051

build:self_execute --remote_executor=grpc://127.0.0.1:50052
build:self_execute --remote_default_exec_properties=cpu_count=1
build:self_execute --platform_suffix=self-execute

build --aspects=@rules_rust//rust:defs.bzl%rustfmt_aspect
build --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect

# Keep this in sync with the top-level Cargo.toml

# rustc lints with negative (low) priority
build --@rules_rust//:extra_rustc_flag=-Wunused

# rustc denies with default priority
build --@rules_rust//:extra_rustc_flag=-Dambiguous_glob_reexports
build --@rules_rust//:extra_rustc_flag=-Dclashing_extern_declarations
build --@rules_rust//:extra_rustc_flag=-Dconst_item_mutation
build --@rules_rust//:extra_rustc_flag=-Ddangling_pointers_from_temporaries
build --@rules_rust//:extra_rustc_flag=-Dderef_nullptr
build --@rules_rust//:extra_rustc_flag=-Ddrop_bounds
build --@rules_rust//:extra_rustc_flag=-Dfuture_incompatible
build --@rules_rust//:extra_rustc_flag=-Dhidden_glob_reexports
build --@rules_rust//:extra_rustc_flag=-Dimproper_ctypes
build --@rules_rust//:extra_rustc_flag=-Dimproper_ctypes_definitions
build --@rules_rust//:extra_rustc_flag=-Dinvalid_from_utf8
build --@rules_rust//:extra_rustc_flag=-Dinvalid_macro_export_arguments
build --@rules_rust//:extra_rustc_flag=-Dinvalid_nan_comparisons
build --@rules_rust//:extra_rustc_flag=-Dinvalid_reference_casting
build --@rules_rust//:extra_rustc_flag=-Dinvalid_value
build --@rules_rust//:extra_rustc_flag=-Dopaque_hidden_inferred_bound
build --@rules_rust//:extra_rustc_flag=-Doverlapping_range_endpoints
build --@rules_rust//:extra_rustc_flag=-Dsuspicious_double_ref_op
build --@rules_rust//:extra_rustc_flag=-Dunconditional_recursion
build --@rules_rust//:extra_rustc_flag=-Dunexpected_cfgs
build --@rules_rust//:extra_rustc_flag=-Dunnameable_test_items
build --@rules_rust//:extra_rustc_flag=-Dunsafe_op_in_unsafe_fn
build --@rules_rust//:extra_rustc_flag=-Dunstable_syntax_pre_expansion

# rustc warnings with default priority
build --@rules_rust//:extra_rustc_flag=-Wkeyword_idents
build --@rules_rust//:extra_rustc_flag=-Wlet_underscore
build --@rules_rust//:extra_rustc_flag=-Wmacro_use_extern_crate
build --@rules_rust//:extra_rustc_flag=-Wmeta_variable_misuse
build --@rules_rust//:extra_rustc_flag=-Wmissing_abi
build --@rules_rust//:extra_rustc_flag=-Wmissing_copy_implementations
build --@rules_rust//:extra_rustc_flag=-Wmissing_debug_implementations
build --@rules_rust//:extra_rustc_flag=-Wnoop_method_call
build --@rules_rust//:extra_rustc_flag=-Wsingle_use_lifetimes
build --@rules_rust//:extra_rustc_flag=-Wtrivial_casts
build --@rules_rust//:extra_rustc_flag=-Wtrivial_numeric_casts
build --@rules_rust//:extra_rustc_flag=-Wunreachable_pub
build --@rules_rust//:extra_rustc_flag=-Wunused_import_braces
build --@rules_rust//:extra_rustc_flag=-Wunused_lifetimes
build --@rules_rust//:extra_rustc_flag=-Wunused_qualifications
build --@rules_rust//:extra_rustc_flag=-Wvariant_size_differences

# TODO(aaronmondal): Extend these flags until we can run with clippy::pedantic.

# clippy lints with negative (low) priority
build --@rules_rust//:clippy_flag=-Wall
build --@rules_rust//:clippy_flag=-Wnursery

# clippy denies with default priority
build --@rules_rust//:clippy_flag=-Dclippy::alloc_instead_of_core
build --@rules_rust//:clippy_flag=-Das_underscore
build --@rules_rust//:clippy_flag=-Dclippy::cast_lossless
build --@rules_rust//:clippy_flag=-Dclippy::default_trait_access
build --@rules_rust//:clippy_flag=-Dclippy::doc_markdown
build --@rules_rust//:clippy_flag=-Dclippy::explicit_deref_methods
build --@rules_rust//:clippy_flag=-Dclippy::explicit_into_iter_loop
build --@rules_rust//:clippy_flag=-Dclippy::explicit_iter_loop
build --@rules_rust//:clippy_flag=-Dclippy::ignored_unit_patterns
build --@rules_rust//:clippy_flag=-Dclippy::implicit_clone
build --@rules_rust//:clippy_flag=-Dclippy::implicit_hasher
build --@rules_rust//:clippy_flag=-Dclippy::inconsistent_struct_constructor
build --@rules_rust//:clippy_flag=-Dclippy::inline_always
build --@rules_rust//:clippy_flag=-Dclippy::items_after_statements
build --@rules_rust//:clippy_flag=-Dclippy::manual_let_else
build --@rules_rust//:clippy_flag=-Dclippy::manual_string_new
build --@rules_rust//:clippy_flag=-Dclippy::map_unwrap_or
build --@rules_rust//:clippy_flag=-Dclippy::match_same_arms
build --@rules_rust//:clippy_flag=-Dclippy::match_wildcard_for_single_variants
build --@rules_rust//:clippy_flag=-Dclippy::missing_const_for_fn
build --@rules_rust//:clippy_flag=-Dclippy::needless_continue
build --@rules_rust//:clippy_flag=-Dclippy::needless_pass_by_value
build --@rules_rust//:clippy_flag=-Dclippy::needless_raw_string_hashes
build --@rules_rust//:clippy_flag=-Dclippy::ptr_as_ptr
build --@rules_rust//:clippy_flag=-Dclippy::range_plus_one
build --@rules_rust//:clippy_flag=-Dclippy::redundant_closure_for_method_calls
build --@rules_rust//:clippy_flag=-Dclippy::redundant_else
build --@rules_rust//:clippy_flag=-Dclippy::ref_as_ptr
build --@rules_rust//:clippy_flag=-Dclippy::return_self_not_must_use
build --@rules_rust//:clippy_flag=-Dclippy::semicolon_if_nothing_returned
build --@rules_rust//:clippy_flag=-Dclippy::single_match_else
build --@rules_rust//:clippy_flag=-Dclippy::stable_sort_primitive
build --@rules_rust//:clippy_flag=-Dclippy::std_instead_of_core
build --@rules_rust//:clippy_flag=-Dclippy::struct_field_names
build --@rules_rust//:clippy_flag=-Dclippy::trivially_copy_pass_by_ref
build --@rules_rust//:clippy_flag=-Dclippy::uninlined_format_args
build --@rules_rust//:clippy_flag=-Dclippy::unnecessary_wraps
build --@rules_rust//:clippy_flag=-Dclippy::unreadable_literal
build --@rules_rust//:clippy_flag=-Dclippy::wildcard_imports

# clippy warnings with default priority
build --@rules_rust//:clippy_flag=-Wdbg_macro
build --@rules_rust//:clippy_flag=-Wdecimal_literal_representation
build --@rules_rust//:clippy_flag=-Wexplicit_auto_deref
build --@rules_rust//:clippy_flag=-Wmissing_enforced_import_renames
build --@rules_rust//:clippy_flag=-Wobfuscated_if_else
build --@rules_rust//:clippy_flag=-Wprint_stdout
build --@rules_rust//:clippy_flag=-Wtodo
build --@rules_rust//:clippy_flag=-Wunimplemented
build --@rules_rust//:clippy_flag=-Wunnested_or_patterns
build --@rules_rust//:clippy_flag=-Wuse_debug

# clippy lints with positive (high) priority
build --@rules_rust//:clippy_flag=-Wclippy::fallible_impl_from
build --@rules_rust//:clippy_flag=-Wclippy::iter_with_drain
build --@rules_rust//:clippy_flag=-Wclippy::option_if_let_else
build --@rules_rust//:clippy_flag=-Wclippy::redundant_pub_crate
build --@rules_rust//:clippy_flag=-Wclippy::significant_drop_tightening
build --@rules_rust//:clippy_flag=-Wclippy::too_long_first_doc_paragraph
build --@rules_rust//:clippy_flag=-Wclippy::uninhabited_references

build --@rules_rust//:clippy.toml=//:clippy.toml
test --@rules_rust//:rustfmt.toml=//:.rustfmt.toml

# This will make rustfmt and clippy only run on `bazel test`.
test --output_groups=+rustfmt_checks
test --output_groups=+clippy_checks

# Optional nightly toolchain. Mostly useful for running sanitizers.
build:nightly --@rules_rust//rust/toolchain/channel=nightly

# AddressSanitizer to detect memory leaks.
build:asan --config=nightly
build:asan --@rules_rust//:extra_rustc_flags=-Zsanitizer=address

# ThreadSanitizer to detect data races. Tests under tsan shouldn't be cached
# since they tend to produce irreproducible false negatives.
build:tsan --config=nightly -c dbg
build:tsan --@rules_rust//:extra_rustc_flags=-Zsanitizer=thread
build:tsan --cache_test_results=no
build:tsan --run_under=//tools:tsan.sh

# Configuration options for Windows builds.
startup --windows_enable_symlinks
build:windows --cxxopt=/std:c++14 --host_cxxopt=/std:c++14
build:windows --enable_runfiles
build:windows --extra_toolchains=@rust_toolchains//:all  # Doesn't support LRE.

# Generated by the LRE flake module.
try-import %workspace%/lre.bazelrc

# Generated by the darwin flake module.
try-import %workspace%/darwin.bazelrc

# Generated by the NixOS flake module.
try-import %workspace%/nixos.bazelrc

# Generated by the nativelink flake module.
try-import %workspace%/nativelink.bazelrc

# Allow user-side customization.
try-import %workspace%/user.bazelrc
