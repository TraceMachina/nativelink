# Prometheus Deployment for NativeLink Metrics
apiVersion: v1
kind: Namespace
metadata:
  name: nativelink
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: nativelink
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'nativelink-k8s'
        environment: 'production'

    # OTLP configuration (requires --web.enable-otlp-receiver flag)
    otlp:
      promote_resource_attributes:
        - service.instance.id
        - service.name
        - service.namespace
        - service.version
        - cloud.availability_zone
        - cloud.region
        - container.name
        - deployment.environment
        - k8s.cluster.name
        - k8s.container.name
        - k8s.deployment.name
        - k8s.namespace.name
        - k8s.pod.name
        - k8s.statefulset.name
        - nativelink.instance_name
        - nativelink.worker_id
        - nativelink.scheduler_name

      keep_identifying_resource_attributes: true
      translation_strategy: NoUTF8EscapingWithSuffixes

    storage:
      tsdb:
        out_of_order_time_window: 30m
        retention.time: 30d

    scrape_configs:
      - job_name: 'otel-collector'
        static_configs:
          - targets: ['otel-collector:9090']
        metric_relabel_configs:
          - source_labels: [__name__]
            regex: '(nativelink_.*)'
            target_label: __name__
            replacement: '${1}'

      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Kubernetes service discovery for NativeLink pods
      - job_name: 'nativelink-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ['nativelink']
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

    rule_files:
      - /etc/prometheus/rules/*.yml

    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['alertmanager:9093']

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: nativelink
data:
  nativelink-rules.yml: |
    groups:
      - name: nativelink_alerts
        interval: 30s
        rules:
          - alert: NativeLinkHighErrorRate
            expr: |
              (1 - (
                sum(rate(nativelink_execution_completed_count{execution_result="success"}[5m])) /
                sum(rate(nativelink_execution_completed_count[5m]))
              )) > 0.05
            for: 5m
            labels:
              severity: warning
              component: nativelink
            annotations:
              summary: "High execution error rate ({{ $value | humanizePercentage }})"
              description: "NativeLink execution error rate is above 5% for the last 5 minutes"

          - alert: NativeLinkCacheMissRateHigh
            expr: |
              (1 - (
                sum(rate(nativelink_cache_operations{cache_operation_result="hit"}[5m])) by (cache_type) /
                sum(rate(nativelink_cache_operations{cache_operation_name="read"}[5m])) by (cache_type)
              )) > 0.5
            for: 10m
            labels:
              severity: info
              component: nativelink
            annotations:
              summary: "Cache miss rate above 50% for {{ $labels.cache_type }}"
              description: "Cache {{ $labels.cache_type }} has a miss rate above 50% for 10 minutes"

          - alert: NativeLinkQueueBacklog
            expr: |
              sum(nativelink_execution_active_count{execution_stage="queued"}) > 100
            for: 15m
            labels:
              severity: warning
              component: nativelink
            annotations:
              summary: "Execution queue backlog above 100 actions"
              description: "{{ $value }} actions are queued for execution"

          - alert: NativeLinkWorkerUtilizationLow
            expr: |
              count(nativelink_execution_active_count{execution_stage="executing"} > 0) /
              count(count by (execution_worker_id) (nativelink_execution_active_count)) < 0.3
            for: 30m
            labels:
              severity: info
              component: nativelink
            annotations:
              summary: "Worker utilization below 30%"
              description: "Only {{ $value | humanizePercentage }} of workers are active"

          - alert: NativeLinkCacheEvictionRateHigh
            expr: |
              sum(rate(nativelink_cache_operations{cache_operation_name="evict"}[5m])) by (cache_type) > 10
            for: 10m
            labels:
              severity: warning
              component: nativelink
            annotations:
              summary: "High cache eviction rate for {{ $labels.cache_type }}"
              description: "Cache {{ $labels.cache_type }} is evicting {{ $value }} items per second"

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: nativelink
  labels:
    app: prometheus
spec:
  type: ClusterIP
  selector:
    app: prometheus
  ports:
    - name: web
      port: 9090
      targetPort: 9090
      protocol: TCP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: nativelink
  labels:
    app: prometheus
spec:
  serviceName: prometheus
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      containers:
        - name: prometheus
          image: prom/prometheus:v2.50.0
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
            - '--web.enable-otlp-receiver'
            - '--storage.tsdb.retention.time=30d'
            - '--storage.tsdb.out-of-order-time-window=30m'
          ports:
            - containerPort: 9090
              name: web
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
            - name: rules
              mountPath: /etc/prometheus/rules
            - name: storage
              mountPath: /prometheus
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: rules
          configMap:
            name: prometheus-rules
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 50Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: nativelink

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: nativelink

---
# Ingress for external access (optional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus
  namespace: nativelink
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: prometheus.nativelink.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: prometheus
                port:
                  number: 9090
