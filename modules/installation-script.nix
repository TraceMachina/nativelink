{
  config,
  lib,
  pkgs,
  ...
}: {
  options = {
    bazelrcContent = lib.mkOption {
      type = lib.types.str;
      default = "";
      description = "
        The content of the Bazel configuration, which gets copied to ${config.namespace}.bazelrc.
      ";
    };
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
    };
    installationScript = lib.mkOption {
      type = lib.types.str;
      default = "";
      description = lib.mkDoc ''
        A bash snippet that creates a ${config.namespace}.bazelrc file in the repository.
      '';
    };
    namespace = lib.mkOption {
      type = lib.types.str;
    };
  };

  config = lib.mkIf config.enable {
    installationScript = let
      bazelrc = pkgs.writeText "${config.namespace}.bazelrc" ''
        # These flags are dynamically generated by the ${config.namespace} flake module.
        #
        # Add `try-import %%workspace%%/${config.namespace}.bazelrc` to your .bazelrc
        # to include these flags to your Bazel environment.

        ${config.bazelrcContent}
      '';
    in ''
      if ! type -t git >/dev/null; then
        # In pure shells
        echo 1>&2 "WARNING: ${config.namespace}: git command not found; skipping installation."
      elif ! ${pkgs.git}/bin/git rev-parse --git-dir &> /dev/null; then
        echo 1>&2 "WARNING: ${config.namespace}: .git not found; skipping installation."
      else
        GIT_WC=`${pkgs.git}/bin/git rev-parse --show-toplevel`

        # These update procedures compare before they write, to avoid
        # filesystem churn. This improves performance with watch tools like
        # lorri and prevents installation loops by lorri.

        if ! readlink "''${GIT_WC}/${config.namespace}.bazelrc" >/dev/null \
          || [[ $(readlink "''${GIT_WC}/${config.namespace}.bazelrc") != ${bazelrc} ]]; then
          echo 1>&2 "${config.namespace}: updating $PWD repository"
          [ -L ${config.namespace}.bazelrc ] && unlink ${config.namespace}.bazelrc

          if [ -e "''${GIT_WC}/${config.namespace}.bazelrc" ]; then
            echo 1>&2 "${config.namespace}: WARNING: Refusing to install because of pre-existing ${config.namespace}.bazelrc"
            echo 1>&2 "  Remove the ${config.namespace}.bazelrc file and add ${config.namespace}.bazelrc to .gitignore."
          else
            ln -fs ${bazelrc} "''${GIT_WC}/${config.namespace}.bazelrc"
          fi
        fi
      fi
    '';
  };
}
